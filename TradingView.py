import streamlit as st
import pandas as pd
import numpy as np
import datetime as dt
from datetime import datetime, timedelta, date
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from pathlib import Path
import appdirs as ad
CACHE_DIR = ".cache"
# Force appdirs to say that the cache dir is .cache
ad.user_cache_dir = lambda *args: CACHE_DIR
# Create the cache dir if it doesn't exist
Path(CACHE_DIR).mkdir(exist_ok=True)
import yfinance as yf
from sklearn.linear_model import LinearRegression
from streamlit import set_page_config
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from statsmodels.tsa.arima.model import ARIMA

# Importing TradeView library
import TradingView as tv

# Set page configuration for full width
set_page_config(layout="wide")

# start definicji strony
st.title('The main global economy indicators and')
st.title('some of my own LSTM prediction models')

# Definicje
today = date.today()
comm_dict = {'EURUSD=X':'USD_EUR','CNY=X':'USD/CNY','CL=F':'Crude_Oil',
             '^DJI':'DJI30','GC=F':'Gold','^IXIC':'NASDAQ',
             '^GSPC':'SP_500','^TNX':'10_YB',
             'HG=F':'Copper','GBPUSD=X':'USD_GBP',
             'JPY=X':'USD_JPY','EURPLN=X':'EUR/PLN','PLN=X':'PLN/USD'
             ,'^FVX':'5_YB','RUB=X':'USD/RUB','PL=F':'Platinum',
             'SI=F':'Silver','NG=F':'Natural Gas','ZR=F':'Rice Futures',
             'ZS=F':'Soy Futures','KE=F':'KC HRW Wheat Futures'}

# Pobieranie danych
def comm_f(comm):
    global df_c1
    for label, name in comm_dict.items():
        if name == comm:
            df_c = pd.DataFrame(yf.download(f'{label}', start='2000-09-01', end = today,interval='1d'))
            df_c1 = df_c.reset_index()

    return df_c1   

# Dane historyczne                    
def comm_data(comm):
    global Tab_his1
    shape_test=[]
    sh = df_c1.shape[0]
    start_date = df_c1.Date.min()
    end_date = df_c1.Date.max()
    close_max = "{:.2f}".format(df_c1['Close'].max())
    close_min = "{:.2f}".format(df_c1['Close'].min())
    last_close = "{:.2f}".format(df_c1['Close'].iloc[-1])
    v = (comm, sh, start_date,end_date,close_max,close_min,last_close)
    shape_test.append(v)
    Tab_length = pd.DataFrame(shape_test, columns= ['Name','Rows', 'Start_Date', 'End_Date','Close_max','Close_min','Last_close'])   
    Tab_his = Tab_length[['Start_Date','End_Date','Close_max','Close_min','Last_close']]
    Tab_his['Start_Date'] = Tab_his['Start_Date'].dt.strftime('%Y-%m-%d')
    Tab_his['End_Date'] = Tab_his['End_Date'].dt.strftime('%Y-%m-%d')
    Tab_his1 = Tab_his.T
    Tab_his1.rename(columns={0: "Details"}, inplace=True)
    
    return Tab_his1

st.sidebar.title('Commodities, Indexies, Currencies & Bonds')
comm = st.sidebar.selectbox('What do you want to analyse today ?', list(comm_dict.values()))
comm_f(comm)
st.sidebar.write('You selected:', comm)
st.sidebar.dataframe(comm_data(comm))

# tu wstawimy wykresy 15 minutowe
def t1_f(char1):
    global tf_c1
    for label, name in comm_dict.items():
        if name == char1:
            box = yf.Ticker(label)
            tf_c = pd.DataFrame(box.history(period='1d', interval="1m"))
            tf_c1 = tf_c[-100:]
    return tf_c1 

def t2_f(char2):
    global tf_c2
    for label, name in comm_dict.items():
        if name == char2:        
            box = yf.Ticker(label)
            tf_c = pd.DataFrame(box.history(period='1d', interval="1m"))
            tf_c2 = tf_c[-100:]
    return tf_c2 


col1, col2 = st.columns([0.47, 0.53])
with col1:
    box = list(comm_dict.values())
    char1 = st.selectbox('Daily trading dynamics', box, index= box.index('Crude_Oil'),key = "<char1>")
    t1_f(char1)
    data_x1 = tf_c1.index
    fig_char1 = px.line(tf_c1, x=data_x1, y=['Open','High','Low','Close'],color_discrete_map={
                 'Open':'yellow','High':'red','Low':'blue','Close':'green'}, width=500, height=400) 
    fig_char1.update_layout(showlegend=False)
    fig_char1.update_layout(xaxis=None, yaxis=None)
    st.plotly_chart(fig_char1) #use_container_width=True
with col2:
    char2 = st.selectbox('Daily trading dynamics', box, index=box.index('PLN/USD'),key = "<char2>")
    t2_f(char2)
    data_x2 = tf_c2.index
    fig_char2 = px.line(tf_c2, x=data_x2, y=['Open','High','Low','Close'],color_discrete_map={
                 'Open':'yellow','High':'red','Low':'blue','Close':'green'}, width=500, height=400) 
    fig_char2.update_layout(showlegend=True)
    fig_char2.update_layout(xaxis=None, yaxis=None)
    st.plotly_chart(fig_char2)

# Definicja wykresu średnich ruchomych 
st.subheader('Buy and sell signals generated by short and long rolling averages')
st.subheader(f'for {comm} Prices from NYSE')

xy = (list(df_c1.index)[-1] + 1)  
col3, col4, col5 = st.columns([0.4, 0.3, 0.3])
with col3:
    oil_p = st.slider('How long prices history you need?', 0, xy, 200, key = "<commodities>")
with col4:
    nums = st.number_input('Enter the number of days for short average',value=10, key = "<m30>")
with col5:
    numl = st.number_input('Enter the number of days for long average',value=30, key = "<m35>")
    
def roll_avr(nums,numl):
    global df_c_XDays
    # Oblicz krótkoterminową i długoterminową średnią kroczącą
    df_c1['Short_SMA']= df_c1['Close'].rolling(window=nums).mean()
    df_c1['Long_SMA']= df_c1['Close'].rolling(window=numl).mean()
    
    # Generuj sygnały kupna i sprzedaży
    df_c1['Buy_Signal'] = (df_c1['Short_SMA'] > df_c1['Long_SMA']).astype(int).diff()
    df_c1['Sell_Signal'] = (df_c1['Short_SMA'] < df_c1['Long_SMA']).astype(int).diff()
     
    df_c_XDays = df_c1.iloc[xy - oil_p:xy]
      
    fig1 = px.line(df_c_XDays, x='Date', y=['Close','Short_SMA','Long_SMA'], color_discrete_map={'Close':'#d62728',
                  'Short_SMA': '#f0f921','Long_SMA':'#0d0887'}, width=1000, height=500)
    fig1.add_trace(go.Scatter(x=df_c_XDays[df_c_XDays['Buy_Signal'] == 1].Date, y=df_c_XDays[df_c_XDays['Buy_Signal'] == 1]['Short_SMA'], name='Buy_Signal', mode='markers', 
                             marker=dict(color='green', size=15, symbol='triangle-up')))
    fig1.add_trace(go.Scatter(x=df_c_XDays[df_c_XDays['Sell_Signal'] == 1].Date, y=df_c_XDays[df_c_XDays['Sell_Signal'] == 1]['Short_SMA'], name='Sell_Signal',
                              mode='markers', marker=dict(color='red', size=15, symbol='triangle-down')))
    buy_signals = df_c_XDays[df_c_XDays['Buy_Signal'] == 1]
    #for i in buy_signals.index:
    #    fig1.add_hline(y=buy_signals.loc[i, 'Short_SMA'], line_width=0.5, line_dash="dash", line_color="black")

    sell_signals = df_c_XDays[df_c_XDays['Sell_Signal'] == 1]
    #for i in sell_signals.index:
    #    fig1.add_hline(y=sell_signals.loc[i, 'Short_SMA'], line_width=0.5, line_dash="dash", line_color="black")
    
    fig1.update_layout(xaxis=None, yaxis=None)
    st.plotly_chart(fig1, use_container_width=True)

roll_avr(nums,numl)


# Definicja wykresu stochastycznego 
st.subheader('Buy and sell signals generated by Stochastic oscillator')
st.subheader(f'for {comm} Prices from NYSE')

xyx = (list(df_c1.index)[-1] + 1)  
col6, col7, col8 = st.columns([0.4, 0.3, 0.3])
with col6:
    cut_p = st.slider('How long prices history you need?', 0, xyx, 200, key = "<commodities1>")
with col7:
    K_num = st.number_input('Enter the number of days for %K parameter',value=14, key = "<k14>")
with col8:
    D_num = st.number_input('Enter the number of days for %D parameter',value=14, key = "<d14>")

# Obliczanie %K i %D dla oscylatora stochastycznego
def stoch_oscil(K_num,D_num):
    low_min  = df_c1['Low'].rolling(window = K_num).min()
    high_max = df_c1['High'].rolling(window = D_num).max()
    df_c1['%K'] = (100*(df_c1['Close'] - low_min) / (high_max - low_min)).fillna(0)
    df_c1['%D'] = df_c1['%K'].rolling(window = 3).mean()

    # Generowanie sygnałów kupna/sprzedaży
    df_c1['Buy_Signal'] = np.where((df_c1['%K'] < 20) & (df_c1['%K'] > df_c1['%D']), df_c1['Close'], np.nan)
    df_c1['Sell_Signal'] = np.where((df_c1['%K'] > 80) & (df_c1['%K'] < df_c1['%D']), df_c1['Close'], np.nan)

    df_cx_d = df_c1.iloc[xyx - cut_p:xyx]

    fig2 = px.line(df_cx_d,x='Date', y=['Close'],color_discrete_map={'Close':'dodgerblue'}, width=1000, height=500) #'Close':'#d62728',,'%K': '#f0f921','%D':'#0d0887'
    fig2.add_trace(go.Scatter(x=df_cx_d['Date'], y=df_cx_d['Buy_Signal'], mode='markers', name='Buy Signal', marker=dict(color='green', size=15, symbol='triangle-up')))
    fig2.add_trace(go.Scatter(x=df_cx_d['Date'], y=df_cx_d['Sell_Signal'], mode='markers', name='Sell Signal', marker=dict(color='red', size=15, symbol='triangle-down')))

    # Dodajemy poziome linie dla sygnałów kupna i sprzedaży
    buy_signals = df_cx_d.dropna(subset=['Buy_Signal'])
    #for i in buy_signals.index:
    #    fig2.add_hline(y=buy_signals.loc[i, 'Buy_Signal'], line_width=0.5, line_dash="dash", line_color="black")

    sell_signals = df_cx_d.dropna(subset=['Sell_Signal'])
    #for i in sell_signals.index:
    #    fig2.add_hline(y=sell_signals.loc[i, 'Sell_Signal'], line_width=0.5, line_dash="dash", line_color="black")

    fig2.update_layout(xaxis=None, yaxis=None)
    st.plotly_chart(fig2, use_container_width=True)

stoch_oscil(K_num,D_num)

# Arima - model - prognoza trendu
def Arima_f(comm, size_a):
    data = np.asarray(df_c1['Close'][-300:]).reshape(-1, 1)
    p = 10
    d = 0
    q = 5
    n = size_a

    model = ARIMA(data, order=(p, d, q))
    model_fit = model.fit(method_kwargs={'maxiter': 3000})
    model_fit = model.fit(method_kwargs={'xtol': 1e-6})
    fore_arima = model_fit.forecast(steps=n)  
    
    arima_dates = [datetime.today() + timedelta(days=i) for i in range(0, size_a)]
    arima_pred_df = pd.DataFrame({'Date': arima_dates, 'Predicted_Close': fore_arima[0]})
    arima_pred_df['Date'] = pd.to_datetime(arima_pred_df['Date'],format='%Y%m%d')
    return arima_pred_df

# LSTM - model - prognoza trendu
def LSTM_f(comm, size_l):
    model = 'LSTM'
    data = np.asarray(df_c1['Close'][-500:])
    from Functions_TS import forecasting

    forecasting(model, data, size_l, comm)

comm_w = comm_dict[comm]
col9, col10, col11 = st.columns([0.33, 0.33, 0.33])
with col9:
    prog_a = st.slider('How many days ahead to forecast with ARIMA?', 1, 30, 7, key = "<prog_a>")
with col10:
    prog_l = st.slider('How many days ahead to forecast with LSTM?', 1, 30, 7, key = "<prog_l>")
with col11:
    st.write('')
    st.write('')
    st.write('')
    st.write('')
    st.write('')
    st.write('')   
    st.write('')
    st.write('')

arima = Arima_f(comm_w, prog_a)
st.header('ARIMA Model Forecast')
st.write(arima)
st.write('')
LSTM_f(comm_w, prog_l)

st.header('LSTM Model Forecast')
path1 = "LSTM_Results/Forecasted_Close_Price_for_"+comm_w+".png"
image = Image.open(path1)
st.image(image, caption='Forecasted Close Price for '+comm_w+' with LSTM', use_column_width=True)

# Display TradeView chart
st.header("TradeView Chart")
trading_view = tv.TradingViewWidget(symbol=comm_w)
st.write(trading_view)
